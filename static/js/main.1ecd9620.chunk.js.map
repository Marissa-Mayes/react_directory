{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","state","setState","useEffect","a","fetch","response","json","body","console","log","results","fetchData","className","onClick","dontMessWithState","sort","b","name","first","localeCompare","sortIt","filterReturns","filter","gender","filterIt","map","person","index","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"+OAgEeA,MA3Df,WAAgB,IAAD,EACWC,mBAAS,CAAC,KADrB,mBACNC,EADM,KACCC,EADD,KAyCb,OAvCAC,qBAAU,WAAI,4CACZ,8BAAAC,EAAA,sEACqBC,MAAM,yCAD3B,cACIC,EADJ,gBAEiBA,EAASC,OAF1B,OAEIC,EAFJ,OAGAC,QAAQC,IAAIF,EAAKG,SACjBT,EAASM,EAAKG,SACdF,QAAQC,IAAI,mBALZ,4CADY,uBAAC,WAAD,wBAQZE,KACC,IA+BD,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,mDAEA,2BACC,4BAAQC,QAAS,kBAlCxB,WACEL,QAAQC,IAAI,kBACZ,IAAIK,EAAiB,YAAOd,GAC5BQ,QAAQC,IAAIK,GACZA,EAAkBC,MAAK,SAACZ,EAAEa,GAGxB,OAH8Bb,EAAEc,KAAKC,MAAMC,cAAcH,EAAEC,KAAKC,OAEhEV,QAAQC,IAAKN,EAAEc,KAAKC,MAAQF,EAAEC,KAAKC,OAC5Bf,EAAEc,KAAKC,MAAQF,EAAEC,KAAKC,OAAO,EAAE,KAExCjB,EAASa,GACTN,QAAQC,IAAIK,GAwBcM,KAArB,qBAED,4BAAQP,QAAU,kBAvB1B,WACEL,QAAQC,IAAI,kBACZ,IAAIK,EAAiB,YAAOd,GAC5BQ,QAAQC,IAAIK,GACZ,IAAMO,EAAcP,EAAkBQ,QAAO,SAACnB,GAG5C,OAFAK,QAAQC,IAAIN,GAEQ,WAAbA,EAAEoB,UAEXtB,EAASoB,GACTb,QAAQC,IAAIY,GAagBG,KAAtB,oBACCxB,EAAMyB,KAAI,SAACC,EAAQC,GAAT,aACT,wBAAIC,IAAKD,GAAT,OAAiBD,QAAjB,IAAiBA,GAAjB,UAAiBA,EAAQT,YAAzB,aAAiB,EAAcC,aC5CrBW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtC,QAAQsC,MAAMA,EAAMC,a","file":"static/js/main.1ecd9620.chunk.js","sourcesContent":["\nimport React, { useEffect ,useState} from 'react';\n// import logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  const [state, setState]=useState([{}])\n  useEffect(()=>{\n    async function fetchData(){\n    let response = await fetch(\"https://randomuser.me/api/?results=60\")\n    let body = await response.json()\n    console.log(body.results)\n    setState(body.results)\n    console.log(\"IT IS EFFECTIVE\")\n    }\n    fetchData()\n  }, [])\n\n  function sortIt(){\n    console.log(\"click detected\")\n    let dontMessWithState = [...state];\n    console.log(dontMessWithState)\n    dontMessWithState.sort((a,b)=>{ a.name.first.localeCompare(b.name.first)\n    \n      console.log( a.name.first < b.name.first)\n      return a.name.first < b.name.first?-1:1}\n    )\n    setState(dontMessWithState)\n    console.log(dontMessWithState)\n    //.sort\n  }\nfunction filterIt() {\n  console.log(\"click detected\")\n  let dontMessWithState = [...state];\n  console.log(dontMessWithState)\n  const filterReturns=dontMessWithState.filter((a)=>{ \n    console.log(a)\n  \n    return a.gender === \"female\"\n  })\n  setState(filterReturns)\n  console.log(filterReturns)\n\n}\n  \n   \n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1> Employee Directory</h1>\n        {/* <img src={logo} className=\"App-logo\" alt=\"logo\" /> */}\n        <p>\n         <button onClick={()=>sortIt()}>Alphabetize list</button> \n        </p>\n        <button onClick ={()=>filterIt()}>Female Employees</button>\n        {state.map((person, index)=>(\n          <h1 key={index}>{person?.name?.first}</h1>\n        ))}\n   \n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}